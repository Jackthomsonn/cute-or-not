
// Breakpoints

  // Determine Breakpoint Sizes
  @mixin respond-to($breakpoint) {
    @if $breakpoint == "small" {
      @media (min-width: $small) {
        @content;
      }
    }
    @if $breakpoint == "medium" {
      @media (min-width: $medium) {
        @content;
      }
    }
    @if $breakpoint == "large" {
      @media (min-width: $large) {
        @content;
      }
    }
  }

//Typography Mixins

  // Font Size With Pixel Fallback And Calculate Line Heights
  @mixin font-size($sizeValue: 16, $line: $sizeValue * 1.5) {
    font-size: ($sizeValue) + px;
    line-height: ($line) + px;
    font-size: ($sizeValue / 16) + rem;
    line-height: ($line / 16) + rem;
}

// Retina Mixin

  // Determine If We Show The User The @2x Version Of An Image Depending On Their Device Pixel Ratio
  @mixin image-2x($image) {
    @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6 / 2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
          background-image: url($image);
      }
  }

// Useful Mixins

  // Quadradius
  @mixin quadradius($top-left, $top-right, $bottom-left, $bottom-right) {
    border-top-left-radius: $top-left + px;
    border-top-right-radius: $top-right + px;
    border-bottom-left-radius: $bottom-left + px;
    border-bottom-right-radius: $bottom-right + px;
  }

  // Easy Circle
  @mixin circle($size) {
    width: $size + px;
    height: $size + px;
    border-radius: 100%;
  }

  // Easy Triangles
  @mixin triangle($color, $size, $direction) {
    width: 0;
    height: 0;
    @if $direction == "up" {
      border-right: ($size + px) solid transparent;
      border-left: ($size + px) solid transparent;
      border-bottom: ($size + px) solid $color;
    }
    @if $direction == "down" {
      border-right: ($size + px) solid transparent;
      border-left: ($size + px) solid transparent;
      border-top: ($size + px) solid $color;
    }
    @if $direction == "right" {
      border-top: ($size + px) solid transparent;
      border-bottom: ($size + px) solid transparent;
      border-left: ($size + px) solid $color;
    }
    @if $direction == "left" {
      border-top: ($size + px) solid transparent;
      border-bottom: ($size + px) solid transparent;
      border-right: ($size + px) solid $color;
      }
    }

    @mixin easing($type, $duration) {
      transition: $type ease-in-out $duration;
    }
